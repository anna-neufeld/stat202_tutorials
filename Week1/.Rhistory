names(tree1)
tree1$parms
names(tree1$parms)
names(tree1$parms$data
)
tree1$parms$data
tree1$parms$flat_data
tree1$parms$yvar
tree1$parms$tvar
tree1$df
tree1$parms$df
tree1$parms
tree1$parms$boundaryKnots
tree1$parms$innerKnots
tree1$parms$basisMatrix
tree1$intercept
tree1$parms$intercept
splitForm <- ~HISP+WHITE+BLACK+HGC_MOTHER+HGC_FATHER+SEX+Num_sibs
tree1 <- splineTree(splitForm, BMI~AGE, 'ID', nlsySample, degree=3, intercept=FALSE, cp=0.005)
tree1
?nodePlot
nodePlot
model=tree1
data = model$parms$data
tvar = model$parms$tvar
yvar = model$parms$yvar
idvar = model$parms$idvar
degree = model$parms$degree
df = model$parms$df
intercept = model$parms$intercept
innerKnots = model$parms$innerKnots
boundaryKnots = model$parms$boundaryKnots
f = model$frame
leaves = (1:dim(f)[1])[f$var == "<leaf>"]
leaves = (1:dim(f)[1])[f$var == "<leaf>"]
peopleIndices = unique(data[[idvar]])
plotList2 = list()
xplotList = list()
i=1
personData = data[which(data[[idvar]] %in% nodeMembers),
]
newx <- sort(unique(model$parms$data[[tvar]]))
odeMembers = peopleIndices[which(model$where == leaves[i])]
odeMembers = peopleIndices[which(model$where == leaves[i])]
nodeMembers = peopleIndices[which(model$where == leaves[i])]
personData = data[which(data[[idvar]] %in% nodeMembers),
]
newx <- sort(unique(model$parms$data[[tvar]]))
intercept
newxmat <- bs(newx, knots = innerKnots, Boundary.knots = boundaryKnots,
degree = degree)
newxmat
head(newxmat)
dim(newxmat)
nodePlot
realcoeffs = model$frame[leaves[i], ]$yval2
preds2 <- newxmat %*% t(realcoeffs)
preds2
?splinetree
?splineTree
library(splinetree)
splitForm <- ~HISP+WHITE+BLACK+HGC_MOTHER+HGC_FATHER+SEX+Num_sibs
tree_int <- splineTree(splitForm, BMI~AGE, 'ID', nlsySample, degree=3, intercept=TRUE, cp=0.005)
tree_no_int <- splineTree(splitForm, BMI~AGE, 'ID', nlsySample, degree=3, intercept=FALSE, cp=0.005)
nodePLot
nodePlot
model <- tree_no_int
data = model$parms$data
tvar = model$parms$tvar
yvar = model$parms$yvar
idvar = model$parms$idvar
degree = model$parms$degree
df = model$parms$df
intercept = model$parms$intercept
innerKnots = model$parms$innerKnots
boundaryKnots = model$parms$boundaryKnots
f = model$frame
leaves = (1:dim(f)[1])[f$var == "<leaf>"]
peopleIndices = unique(data[[idvar]])
plotList2 = list()
xplotList = list()
for (i in 1:length(leaves)) {
nodeMembers = peopleIndices[which(model$where == leaves[i])]
personData = data[which(data[[idvar]] %in% nodeMembers),
]
newx <- sort(unique(model$parms$data[[tvar]]))
if (intercept == TRUE) {
newxmat <- cbind(1, bs(newx, knots = innerKnots,
Boundary.knots = boundaryKnots, degree = degree))
mean_int = 0
}
else {
newxmat <- bs(newx, knots = innerKnots, Boundary.knots = boundaryKnots,
degree = degree)
mean_int = mean(personData[(personData[[tvar]] -
min(personData[[tvar]])) < 1, ][[yvar]])
}
realcoeffs = model$frame[leaves[i], ]$yval2
preds2 <- newxmat %*% t(realcoeffs)
print(preds2)
}
model <- tree_no_int
data = model$parms$data
tvar = model$parms$tvar
yvar = model$parms$yvar
idvar = model$parms$idvar
degree = model$parms$degree
df = model$parms$df
intercept = model$parms$intercept
innerKnots = model$parms$innerKnots
boundaryKnots = model$parms$boundaryKnots
f = model$frame
leaves = (1:dim(f)[1])[f$var == "<leaf>"]
peopleIndices = unique(data[[idvar]])
plotList2 = list()
xplotList = list()
for (i in 1:length(leaves)) {
nodeMembers = peopleIndices[which(model$where == leaves[i])]
personData = data[which(data[[idvar]] %in% nodeMembers),
]
newx <- sort(unique(model$parms$data[[tvar]]))
if (intercept == TRUE) {
newxmat <- cbind(1, bs(newx, knots = innerKnots,
Boundary.knots = boundaryKnots, degree = degree))
mean_int = 0
}
else {
newxmat <- bs(newx, knots = innerKnots, Boundary.knots = boundaryKnots,
degree = degree)
mean_int = mean(personData[(personData[[tvar]] -
min(personData[[tvar]])) < 1, ][[yvar]])
}
realcoeffs = model$frame[leaves[i], ]$yval2
preds2 <- newxmat %*% t(realcoeffs)
print(t(preds2))
}
for (i in 1:length(leaves)) {
nodeMembers = peopleIndices[which(model$where == leaves[i])]
personData = data[which(data[[idvar]] %in% nodeMembers),
]
newx <- sort(unique(model$parms$data[[tvar]]))
if (intercept == TRUE) {
newxmat <- cbind(1, bs(newx, knots = innerKnots,
Boundary.knots = boundaryKnots, degree = degree))
mean_int = 0
}
else {
newxmat <- bs(newx, knots = innerKnots, Boundary.knots = boundaryKnots,
degree = degree)
mean_int = mean(personData[(personData[[tvar]] -
min(personData[[tvar]])) < 1, ][[yvar]])
}
realcoeffs = model$frame[leaves[i], ]$yval2
preds2 <- newxmat %*% t(realcoeffs)
print(as.numeric(preds2))
}
for (i in 1:length(leaves)) {
nodeMembers = peopleIndices[which(model$where == leaves[i])]
personData = data[which(data[[idvar]] %in% nodeMembers),
]
newx <- sort(unique(model$parms$data[[tvar]]))
if (intercept == TRUE) {
newxmat <- cbind(1, bs(newx, knots = innerKnots,
Boundary.knots = boundaryKnots, degree = degree))
mean_int = 0
}
else {
newxmat <- bs(newx, knots = innerKnots, Boundary.knots = boundaryKnots,
degree = degree)
mean_int = mean(personData[(personData[[tvar]] -
min(personData[[tvar]])) < 1, ][[yvar]])
}
realcoeffs = model$frame[leaves[i], ]$yval2
preds2 <- newxmat %*% t(realcoeffs)
print(rbind(newx, t(preds2)))
}
boundaryKnots
splineTree
getBasisMat
library(splinetree)
?splineTree
?plot
?splineTree
library(splinetree)
?splineTree
?avSize
cheese <- c(3,5,6,7,12)
piechart(cheese)
?piechart
pie(cheese)
?pie
pie(cheese, colors=c("blue", "orange", "purple", "cyan", "red"))
pie(cheese, col=c("blue", "orange", "purple", "cyan", "red"))
pie(cheese, col=c("blue", "white", "purple", "cyan", "red"))
cheese
sum(cheese)
cheese/sum(cheese)
?ie
?pie
pie(cheese, col=c("blue", "white", "purple", "cyan", "red"))
pie(cheese, col=c("blue", "white", "purple", "cyan", "red"), labels=c(0.09, 0.15, 0.18, 0.21, 0.36))
57.73*40,000
57.73*40000
0.5773*40000
n <- 40000
n.like.coffee <- 0.5773*n
n.dont.like.coffee <- n-n.like.coffee
population <- c(rep("Yes", n.like.coffee),
rep("No", n.dont.like.coffee))
barplot(table(population))
head(shuffle(population))
mosaic::shuffle
library(mosaic)
head(shuffle(population))
table(population)
barplot(table(population), main = "Do you like Coffee?")
population
phats <- replicate(10000, sum(sample(population, size=100)=="Yes")/100)
phats
lowers <- phats - 1.96*sqrt(phat*(1-phat)/sqrt(100))
lowers <- phats - 1.96*sqrt(phats*(1-phats)/sqrt(100))
uppers <- phats - 1.96*sqrt(phats*(1-phats)/sqrt(100))
plot(lowers)
phats
lowers <- phats - 1.96*sqrt(phats*(1-phats)/100)
uppers <- phats - 1.96*sqrt(phats*(1-phats)/100)
lowers <- phats - 1.96*sqrt(phats*(1-phats)/100)
range(lowers)
range(uppers)
lowers <- phats - 1.96*sqrt(phats*(1-phats)/100)
uppers <- phats + 1.96*sqrt(phats*(1-phats)/100)
sum(lowers < 0.5773 & uppers > 0.5773)
correct/10000
correct <- sum(lowers < 0.5773 & uppers > 0.5773)
correct/10000
range(lowers)
range(uppers)
correct/10000
### Pretty close to 95%!!!
plot(0,0,col="white", xlim=c(0.25, 0.85), ylim=c(0,100))
abline(v=0.5773, col="red")
?segments
plot(0,0,col="white", xlim=c(0.25, 0.85), ylim=c(0,100))
abline(v=0.5773, col="red")
for (i in c(0:50)) {
points(i*2, phats[i], pch=19)
}
phats[i]
i
for (i in c(1:50)) {
points(i*2, phats[i], pch=19)
}
plot(0,0,col="white", xlim=c(0.25, 0.85), ylim=c(0,100))
abline(v=0.5773, col="red")
for (i in c(1:50)) {
points(i*2, phats[i], pch=19)
}
plot(0,0,col="white", xlim=c(0.25, 0.85), ylim=c(0,100))
abline(v=0.5773, col="red")
for (i in c(1:50)) {
points(phats[i], i*2, pch=19, col="black")
}
plot(0,0,col="white", xlim=c(0.25, 0.85), ylim=c(0,100))
abline(v=0.5773, col="red")
for (i in c(1:50)) {
points(phats[i], i*2, pch=19, col="black")
segments(lowers[i], i*2, uppers[i], i*2)
}
plot(0,0,col="white", xlim=c(0.25, 0.85), ylim=c(0,100), main="First 50 Confidence Intervals", ylab="Trial", xlab="p")
abline(v=0.5773, col="red")
for (i in c(1:50)) {
points(phats[i], i*2, pch=19, col="black")
segments(lowers[i], i*2, uppers[i], i*2)
}
plot(0,0,col="white", xlim=c(0.25, 0.85), ylim=c(0,50), main="First 50 Confidence Intervals", ylab="Trial", xlab="p")
abline(v=0.5773, col="red")
for (i in c(1:50)) {
points(phats[i], i, pch=19, col="black")
segments(lowers[i], i, uppers[i], i)
}
plot(0,0,col="white", xlim=c(0.25, 0.85), ylim=c(51,100), main="Second 50 Confidence Intervals", ylab="Trial", xlab="p")
abline(v=0.5773, col="red")
for (i in c(51:100)) {
points(phats[i], i, pch=19, col="black")
segments(lowers[i], i, uppers[i], i)
}
plot(0,0,col="white", xlim=c(0.25, 0.85), ylim=c(51,100), main="Third 50 Confidence Intervals", ylab="Trial", xlab="p")
abline(v=0.5773, col="red")
for (i in c(101:150)) {
points(phats[i], i, pch=19, col="black")
segments(lowers[i], i, uppers[i], i)
}
plot(0,0,col="white", xlim=c(0.25, 0.85), ylim=c(101,150), main="Third 50 Confidence Intervals", ylab="Trial", xlab="p")
abline(v=0.5773, col="red")
for (i in c(101:150)) {
points(phats[i], i, pch=19, col="black")
segments(lowers[i], i, uppers[i], i)
}
plot(0,0,col="white", xlim=c(0.25, 0.85), ylim=c(0,50), main="First 50 Confidence Intervals", ylab="Trial", xlab="p")
abline(v=0.5773, col="red")
for (i in c(1:50)) {
points(phats[i], i, pch=19, col="black")
segments(lowers[i], i, uppers[i], i)
}
plot(0,0,col="white", xlim=c(0.25, 0.85), ylim=c(51,100), main="Second 50 Confidence Intervals", ylab="Trial", xlab="p")
abline(v=0.5773, col="red")
for (i in c(51:100)) {
points(phats[i], i, pch=19, col="black")
segments(lowers[i], i, uppers[i], i)
}
plot(0,0,col="white", xlim=c(0.25, 0.85), ylim=c(101,150), main="Third 50 Confidence Intervals", ylab="Trial", xlab="p")
abline(v=0.5773, col="red")
for (i in c(101:150)) {
points(phats[i], i, pch=19, col="black")
segments(lowers[i], i, uppers[i], i)
}
correct <- sum(lowers < 0.5773 & uppers > 0.5773)
correct/10000
curve(x*(1-x), xlim=c(0,1), main="p(1-p)", xlab="p", ylab="p(1-p)", lwd=3)
rbinom(10000, 0.07, 15)
rbinom(10000, 15, 0.07)
many.phats <- rbinom(10000, 15, 0.07)/10000
many.phats
many.phats <- rbinom(10000, 150, 0.07)/
many.phats <- rbinom(10000, 150, 0.07)
many.phats <- rbinom(10000, 150, 0.07)
many.phats <- rbinom(10000, 150, 0.07)/150
many.phats
sd(many.phats)
sqrt(0.07*(1-0.07)/150)
many.phats <- rbinom(10000, 150, 0.07)/150
sqrt(0.07*(1-0.07)/150)
sqrt(0.07*(1-0.07)/150)
upper <- mean(many.phats) + 2*0.02083267
lower <- mean(many.phats) - 2*0.02083267
sum(many.phats > lower & many.phats < upper)
sum(many.phats > lower & many.phats < upper)/10000
l <- mean(many.phats) - 2*sd(many.phats)
u <- mean(many.phats) + 2*sd(many.phats)
sum(many.phats > l & many.phats < u)
sum(many.phats > 0.2)
sum(many.phats > 0.15)
setwd("~/311/Fall2019/oiLabs-tidy/01_intro")
clear
clc
5+2
setwd("~/311/Fall2019/oiLabs-tidy/01_intro")
library(tidyverse)
library(openintro)
library(oilabs)
source("http://www.openintro.org/stat/data/arbuthnot.R")
arbuthnot
arbuthnot %>% filter(year == 1685)
arbuthnot %>% filter(boys > 1685)
arbuthnot %>% filter(boys > 8000)
arbuthnot %>% filter(girls > 8000)
knitr::opts_chunk$set(eval = FALSE)
library(tidyverse)
library(openintro)
library(tidyverse)
library(openintro)
source("http://www.openintro.org/stat/data/nycflights.R")
names(nycflights)
glimpse(nycflights)
library(oilabs)
?nycflights
jetblueflights <- nycflights %>% filter(carrier == 'B6')
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
lax_flights <- nycflights %>%
filter(dest == "LAX")
ggplot(data = lax_flights, aes(x = dep_delay)) +
geom_histogram()
lax_flights %>%
summarize(mean_dd = mean(dep_delay), median_dd = median(dep_delay), sample_size = n())
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
sfo_feb_flights
head(sfo_feb_flights)
sfo_feb_flights %>% summarize(mymean = mean(arr_delay))
sfo_feb_flights %>% summarize(mymean = median(arr_delay))
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
geom_histogram()
sfo_feb_flights %>%
group_by(origin) %>%
summarise(median_dd = median(dep_delay), iqr_dd = IQR(dep_delay), n_flights = n())
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median_dd = median(dep_delay), iqr_dd = IQR(dep_delay), n_flights = n())
nycflights %>%
group_by(month) %>%
summarize(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
sfo_feb_flights %>%
group_by(carrier) %>%
summarize(median_ad = median(arr_delay), iqr_ad = IQR(arr_delay), n_flights = n())
sfo_feb_flights %>%
group_by(carrier) %>%
summarize(median_ad = median(arr_delay), iqr_ad = IQR(arr_delay), n_flights = n()) %>% arrange(desc(median_ad))
sfo_feb_flights %>%
group_by(carrier) %>%
summarize(median_ad = median(arr_delay), iqr_ad = IQR(arr_delay), n_flights = n()) %>% arrange(desc(iqr_ad))
ggplot(data = nycflights, aes(x = origin, fill = delayed)) +
geom_bar()
nycflights <- nycflights %>%
mutate(delayed = ifelse(dep_delay < 5, FALSE, TRUE))
nycflights %>%
group_by(origin) %>%
summarize(num_delayed = sum(delayed), total = n())
nycflights %>%
group_by(origin) %>%
summarize(percent_delayed = sum(delayed)/n()) %>%
arrange(desc(percent_delayed))
ggplot(data = nycflights, aes(x = origin, fill = delayed)) +
geom_bar()
nycflights %>%
group_by(origin) %>%
summarize(mean_del = mean(dep_delay))
nycflights %>%
group_by(origin) %>%
summarize(percent_delayed = sum(delayed)/n()) %>%
arrange(desc(percent_delayed))
nycflights %>%
group_by(origin) %>%
summarize(percent_delayed = sum(delayed)/n()) %>%
arrange(desc(percent_delayed))
nycflights %>%
group_by(origin) %>%
summarize(mean_del = sd(dep_delay))
head(nycflights)
nycflights %>% mutate(avg_speed = distance/(air_time/60))
nycflights %>% mutate(avg_speed = distance/(air_time/60)) %>% group_by(carrier) %>% summarize(mean = mean(avg_speed))
nycflights %>% mutate(avg_speed = distance/(air_time/60)) %>% group_by(carrier) %>% summarize(mean = mean(distance))
nycflights <- nycflights %>% mutate(avg_speed = distance/(air_time/60))
nycflights %>% group_by(carrier) %>% summarize(mean = mean(avg_speed)) %>% arrange(desc(mean))
nycflights <- nycflights %>% mutate(avg_speed = distance/(air_time/60))
nycflights %>% group_by(carrier) %>% summarize(mean = mean(avg_speed)) %>% arrange(desc(mean))
ggplot(data = nycflights, aes(x = distance, y=avg_speed)) +
geom_point()
download.file("http://stat.duke.edu/courses/Fall14/sta101.001/labs/sta101_lab1.Rmd", destfile = "sta101_lab1.Rmd",
method = "wget")
ggplot(data = arbuthnot, aes(x = girls)) +
geom_histogram()
ggplot(data = arbuthnot, aes(x = girls)) +
geom_histogram(binwidth=500)
ggplot(data = arbuthnot, aes(x = girls)) +
geom_boxplot()
head(arbuthnot)
ggplot(data = arbuthnot, aes(x = 1, y=girls)) +
geom_boxplot()
arbuthnot %>% summarize(av_girls = mean(girls), av_boys = mean(boys))
arbuthnot %>% summarize(av_girls = mean(girls), av_boys = mean(boys))
arbuthnot %>% summarize(sd_girls = sd(girls), sd_boys =sd(boys))
arbuthnot %>% summarize(av_girls = mean(girls), av_boys = mean(boys))
arbuthnot %>% summarize(sd_girls = sd(girls), sd_boys =sd(boys))
arbuthnot %>% summarize(girls)
arbuthnot %>% summarize(av_girls = mean(girls), av_boys = mean(boys))
arbuthnot %>% summarize(sd_girls = sd(girls), sd_boys =sd(boys))
arbuthnot %>% select(girls) %>% summary()
head(nyc_flights)
head(nycflights)
ggplot(data=nycflights, aes(x=origin, y=dep_delay))+geom_boxplot()
``ggplot(data=nycflights, aes(x=origin, y=dep_delay))+geom_boxplot()
ggplot(data=nycflights, aes(x=origin, y=dep_delay))+geom_boxplot()
nycflights %>% group_by(origin) %>% summarize(mean_delay = mean(dep_delay), median_delay = median(dep_delay))
nycflights %>% group_by(origin) %>% summarize(mean_delay = mean(dep_delay), median_delay = median(dep_delay))
head(nycflights)
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2) %>% select(arr_delay)
mean(sfo_feb_flights)
sfo_feb_slight
sfo_feb_flights
sfo_feb_flights %>% summarize(mean = mean(arr_delay))
sfo_feb_flights %>% summarize(mean = median(arr_delay))
hist(sfo_feb_flights$arr_delay)
nycflights <- nycflights %>% mutate(avg_speed = distance/(air_time/60))
nycflights %>% group_by(carrier) %>% summarize(mean = mean(avg_speed)) %>% arrange(desc(mean))
head(nycflights)
nycflights %>% group_by(carrier) %>% summarize(mean = mean(avg_speed)) %>% arrange(desc(mean))
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
nycflights %>%
group_by(month) %>%
summarize(median_ad = median(arr_delay), n_flights = n())
nycflights %>%
group_by(month) %>%
summarize(median_ad = median(arr_delay), n_flights = n()) %>%
arrange(desc(median(ad)))
nycflights %>%
group_by(month) %>%
summarize(median_ad = median(arr_delay), n_flights = n()) %>%
arrange(desc(median_ad)))
nycflights %>%
group_by(month) %>%
summarize(median_ad = median(arr_delay), n_flights = n()) %>%
arrange(desc(median_ad))
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_line()
arbuthnot %>% summarize(av_girls = mean(girls), av_boys = mean(boys))
arbuthnot %>% summarize(sd_girls = sd(girls), sd_boys =sd(boys))
